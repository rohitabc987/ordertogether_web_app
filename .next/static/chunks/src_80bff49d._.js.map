{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["// @ts-nocheck\n'use server';\n\nimport { z } from 'zod';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { revalidatePath } from 'next/cache';\n\nimport { createPost, findUserByEmail, updateUser, createUserInDb, getUserById } from '@/lib/data';\nimport { filterRestaurants } from '@/ai/flows/restaurant-filtering';\nimport { auth as adminAuth } from 'firebase-admin';\nimport { db } from './firebase-admin';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport async function loginAction(prevState: any, formData: FormData) {\n  const parsed = loginSchema.safeParse(Object.fromEntries(formData));\n\n  if (!parsed.success) {\n    return { message: 'Invalid email or password format.' };\n  }\n\n  const { email, password } = parsed.data;\n  const user = await findUserByEmail(email);\n\n  if (!user || user.password !== password) {\n    return { message: 'Invalid email or password.' };\n  }\n  \n  const cookieStore = cookies();\n  cookieStore.set('session_userId', user.id, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24, // 24 hours\n    path: '/',\n  });\n\n  redirect('/');\n}\n\nexport async function verifyAndSignInAction(idToken: string) {\n  console.log('actions: verifyAndSignInAction started.');\n  try {\n    const decodedToken = await adminAuth().verifyIdToken(idToken);\n    console.log('actions: ID token verified successfully. Decoded token UID:', decodedToken.uid);\n    \n    const email = decodedToken.email;\n    const name = decodedToken.name;\n    const photoURL = decodedToken.picture;\n\n    if (!email || !name) {\n      console.error('actions: Google account missing email or name.');\n      return { success: false, message: 'Google account must have an email and name.' };\n    }\n  \n    if (!email.endsWith('@iitdh.ac.in')) {\n       console.error(`actions: Email is not from @iitdh.ac.in domain: ${email}`);\n      return { success: false, message: `Only users with a @iitdh.ac.in email can sign up. Your email is ${email}.` };\n    }\n    \n    console.log(`actions: Attempting to find user with email: ${email}`);\n    let user = await findUserByEmail(email);\n    let userId: string | undefined = user?.id;\n\n    if (!user) {\n      console.log('actions: User not found. Creating new user in DB...');\n      const newUser = await createUserInDb({\n        name: name,\n        email: email,\n        photoURL: photoURL,\n      });\n      userId = newUser.id;\n      console.log('actions: New user created in DB with ID:', userId);\n    } else {\n      console.log('actions: Existing user found with ID:', userId);\n    }\n    \n    if (!userId) {\n      console.error('actions: Critical error! Failed to get a user ID after find/create.');\n      return { success: false, message: 'Failed to create or find a user in the database.' };\n    }\n\n    console.log(`actions: Setting session cookie for user ID: ${userId}`);\n    const cookieStore = cookies();\n    cookieStore.set('session_userId', userId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 24 hours\n      path: '/',\n    });\n    \n    revalidatePath('/');\n    console.log('actions: Session cookie set and path revalidated. Returning success.');\n    return { success: true };\n\n  } catch (error: any) {\n    console.error('actions: Error during token verification:', error);\n    return { success: false, message: `An unexpected error occurred on the server during token verification: ${error.message}` };\n  }\n}\n\n\nexport async function logoutAction() {\n  const cookieStore = cookies();\n  cookieStore.delete('session_userId');\n  redirect('/login');\n}\n\nconst postSchema = z.object({\n  restaurant: z.string().min(1, 'Restaurant is required.'),\n  minAmount: z.coerce.number().min(0),\n  maxAmount: z.coerce.number().min(0),\n  deadline: z.coerce.date(),\n  notes: z.string().optional(),\n  authorId: z.string(),\n  authorName: z.string(),\n  contact: z.object({\n    phone: z.string(),\n    whatsapp: z.string(),\n  }),\n  location: z.object({\n    hostel: z.string(),\n    society: z.string(),\n  }),\n});\n\nexport async function createPostAction(prevState: any, formData: FormData) {\n  const rawData = {\n    ...Object.fromEntries(formData),\n    contact: JSON.parse(formData.get('contact') as string),\n    location: JSON.parse(formData.get('location') as string),\n  };\n  \n  const parsed = postSchema.safeParse(rawData);\n\n  if (!parsed.success) {\n    console.error(parsed.error.flatten().fieldErrors);\n    return { message: 'Invalid post data. Please check your inputs.' };\n  }\n  \n  if (parsed.data.minAmount > parsed.data.maxAmount) {\n    return { message: 'Minimum amount cannot be greater than maximum amount.' };\n  }\n\n  await createPost(parsed.data);\n  revalidatePath('/');\n  redirect('/');\n}\n\nconst profileSchema = z.object({\n  id: z.string(),\n  name: z.string().min(2, 'Name must be at least 2 characters.'),\n  phone: z.string().min(10, 'Please enter a valid phone number.'),\n  whatsapp: z.string().min(10, 'Please enter a valid WhatsApp number.'),\n  hostel: z.string().min(1, 'Hostel/PG name is required.'),\n  society: z.string().min(1, 'Society/Area name is required.'),\n});\n\nexport async function updateProfileAction(prevState: any, formData: FormData) {\n  const parsed = profileSchema.safeParse(Object.fromEntries(formData));\n\n  if (!parsed.success) {\n    return { message: 'Invalid profile data.' };\n  }\n\n  await updateUser(parsed.data.id, {\n    name: parsed.data.name,\n    contact: { phone: parsed.data.phone, whatsapp: parsed.data.whatsapp },\n    location: { hostel: parsed.data.hostel, society: parsed.data.society },\n  });\n\n  revalidatePath('/profile');\n  revalidatePath('/');\n  return { message: 'Profile updated successfully!' };\n}\n\nexport async function subscribeAction(plan: 'daily' | 'weekly' | 'monthly', userId: string) {\n  let expiryDays = 0;\n  if (plan === 'daily') expiryDays = 1;\n  if (plan === 'weekly') expiryDays = 7;\n  if (plan === 'monthly') expiryDays = 30;\n\n  const expiryDate = new Date();\n  expiryDate.setDate(expiryDate.getDate() + expiryDays);\n\n  await updateUser(userId, {\n    subscription: {\n      status: 'active',\n      plan: plan,\n      expiry: expiryDate.toISOString(),\n    },\n  });\n\n  revalidatePath('/pricing');\n  revalidatePath('/');\n  revalidatePath('/profile');\n}\n\nexport async function getRestaurantSuggestions(location: string) {\n  try {\n    const result = await filterRestaurants({\n      location,\n      pastOrders: \"Pizza, Burgers\", // Mock data\n      currentTrends: \"Italian, Fast Food\", // Mock data\n    });\n    return result.suggestedRestaurants;\n  } catch (error) {\n    console.error(\"AI suggestion failed:\", error);\n    return [];\n  }\n}\n"],"names":[],"mappings":";;;;;;IAkBsB,cAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["// @ts-nocheck\n'use server';\n\nimport { z } from 'zod';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { revalidatePath } from 'next/cache';\n\nimport { createPost, findUserByEmail, updateUser, createUserInDb, getUserById } from '@/lib/data';\nimport { filterRestaurants } from '@/ai/flows/restaurant-filtering';\nimport { auth as adminAuth } from 'firebase-admin';\nimport { db } from './firebase-admin';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport async function loginAction(prevState: any, formData: FormData) {\n  const parsed = loginSchema.safeParse(Object.fromEntries(formData));\n\n  if (!parsed.success) {\n    return { message: 'Invalid email or password format.' };\n  }\n\n  const { email, password } = parsed.data;\n  const user = await findUserByEmail(email);\n\n  if (!user || user.password !== password) {\n    return { message: 'Invalid email or password.' };\n  }\n  \n  const cookieStore = cookies();\n  cookieStore.set('session_userId', user.id, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24, // 24 hours\n    path: '/',\n  });\n\n  redirect('/');\n}\n\nexport async function verifyAndSignInAction(idToken: string) {\n  console.log('actions: verifyAndSignInAction started.');\n  try {\n    const decodedToken = await adminAuth().verifyIdToken(idToken);\n    console.log('actions: ID token verified successfully. Decoded token UID:', decodedToken.uid);\n    \n    const email = decodedToken.email;\n    const name = decodedToken.name;\n    const photoURL = decodedToken.picture;\n\n    if (!email || !name) {\n      console.error('actions: Google account missing email or name.');\n      return { success: false, message: 'Google account must have an email and name.' };\n    }\n  \n    if (!email.endsWith('@iitdh.ac.in')) {\n       console.error(`actions: Email is not from @iitdh.ac.in domain: ${email}`);\n      return { success: false, message: `Only users with a @iitdh.ac.in email can sign up. Your email is ${email}.` };\n    }\n    \n    console.log(`actions: Attempting to find user with email: ${email}`);\n    let user = await findUserByEmail(email);\n    let userId: string | undefined = user?.id;\n\n    if (!user) {\n      console.log('actions: User not found. Creating new user in DB...');\n      const newUser = await createUserInDb({\n        name: name,\n        email: email,\n        photoURL: photoURL,\n      });\n      userId = newUser.id;\n      console.log('actions: New user created in DB with ID:', userId);\n    } else {\n      console.log('actions: Existing user found with ID:', userId);\n    }\n    \n    if (!userId) {\n      console.error('actions: Critical error! Failed to get a user ID after find/create.');\n      return { success: false, message: 'Failed to create or find a user in the database.' };\n    }\n\n    console.log(`actions: Setting session cookie for user ID: ${userId}`);\n    const cookieStore = cookies();\n    cookieStore.set('session_userId', userId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 24 hours\n      path: '/',\n    });\n    \n    revalidatePath('/');\n    console.log('actions: Session cookie set and path revalidated. Returning success.');\n    return { success: true };\n\n  } catch (error: any) {\n    console.error('actions: Error during token verification:', error);\n    return { success: false, message: `An unexpected error occurred on the server during token verification: ${error.message}` };\n  }\n}\n\n\nexport async function logoutAction() {\n  const cookieStore = cookies();\n  cookieStore.delete('session_userId');\n  redirect('/login');\n}\n\nconst postSchema = z.object({\n  restaurant: z.string().min(1, 'Restaurant is required.'),\n  minAmount: z.coerce.number().min(0),\n  maxAmount: z.coerce.number().min(0),\n  deadline: z.coerce.date(),\n  notes: z.string().optional(),\n  authorId: z.string(),\n  authorName: z.string(),\n  contact: z.object({\n    phone: z.string(),\n    whatsapp: z.string(),\n  }),\n  location: z.object({\n    hostel: z.string(),\n    society: z.string(),\n  }),\n});\n\nexport async function createPostAction(prevState: any, formData: FormData) {\n  const rawData = {\n    ...Object.fromEntries(formData),\n    contact: JSON.parse(formData.get('contact') as string),\n    location: JSON.parse(formData.get('location') as string),\n  };\n  \n  const parsed = postSchema.safeParse(rawData);\n\n  if (!parsed.success) {\n    console.error(parsed.error.flatten().fieldErrors);\n    return { message: 'Invalid post data. Please check your inputs.' };\n  }\n  \n  if (parsed.data.minAmount > parsed.data.maxAmount) {\n    return { message: 'Minimum amount cannot be greater than maximum amount.' };\n  }\n\n  await createPost(parsed.data);\n  revalidatePath('/');\n  redirect('/');\n}\n\nconst profileSchema = z.object({\n  id: z.string(),\n  name: z.string().min(2, 'Name must be at least 2 characters.'),\n  phone: z.string().min(10, 'Please enter a valid phone number.'),\n  whatsapp: z.string().min(10, 'Please enter a valid WhatsApp number.'),\n  hostel: z.string().min(1, 'Hostel/PG name is required.'),\n  society: z.string().min(1, 'Society/Area name is required.'),\n});\n\nexport async function updateProfileAction(prevState: any, formData: FormData) {\n  const parsed = profileSchema.safeParse(Object.fromEntries(formData));\n\n  if (!parsed.success) {\n    return { message: 'Invalid profile data.' };\n  }\n\n  await updateUser(parsed.data.id, {\n    name: parsed.data.name,\n    contact: { phone: parsed.data.phone, whatsapp: parsed.data.whatsapp },\n    location: { hostel: parsed.data.hostel, society: parsed.data.society },\n  });\n\n  revalidatePath('/profile');\n  revalidatePath('/');\n  return { message: 'Profile updated successfully!' };\n}\n\nexport async function subscribeAction(plan: 'daily' | 'weekly' | 'monthly', userId: string) {\n  let expiryDays = 0;\n  if (plan === 'daily') expiryDays = 1;\n  if (plan === 'weekly') expiryDays = 7;\n  if (plan === 'monthly') expiryDays = 30;\n\n  const expiryDate = new Date();\n  expiryDate.setDate(expiryDate.getDate() + expiryDays);\n\n  await updateUser(userId, {\n    subscription: {\n      status: 'active',\n      plan: plan,\n      expiry: expiryDate.toISOString(),\n    },\n  });\n\n  revalidatePath('/pricing');\n  revalidatePath('/');\n  revalidatePath('/profile');\n}\n\nexport async function getRestaurantSuggestions(location: string) {\n  try {\n    const result = await filterRestaurants({\n      location,\n      pastOrders: \"Pizza, Burgers\", // Mock data\n      currentTrends: \"Italian, Fast Food\", // Mock data\n    });\n    return result.suggestedRestaurants;\n  } catch (error) {\n    console.error(\"AI suggestion failed:\", error);\n    return [];\n  }\n}\n"],"names":[],"mappings":";;;;;;IA2CsB,wBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["// @ts-nocheck\nimport { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA00F2LyzvMPYTLN4SLjZ0aOPky8CcDyLA\",\n  authDomain: \"studio-5219136729-6683e.firebaseapp.com\",\n  projectId: \"studio-5219136729-6683e\",\n  storageBucket: \"studio-5219136729-6683e.appspot.com\",\n  messagingSenderId: \"183055801352\",\n  appId: \"1:183055801352:web:495772bc4e16491fe6c5bd\"\n};\n\n// Initialize Firebase\nlet app;\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApps()[0];\n}\n\nexport const auth = getAuth(app);\n"],"names":[],"mappings":"AAAA,cAAc;;;;AACd;AAAA;AACA;AAAA;;;AAEA,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,sBAAsB;AACtB,IAAI;AACJ,IAAI,CAAC,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;AACpB;AAEO,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/auth-forms.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useTransition, useEffect, useActionState } from 'react';\nimport { useFormStatus } from 'react-dom';\nimport { loginAction, verifyAndSignInAction } from '@/lib/actions';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { LogIn, UserPlus } from 'lucide-react';\nimport Link from 'next/link';\nimport { GoogleAuthProvider, signInWithPopup, onAuthStateChanged, User as FirebaseAuthUser } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { useRouter } from 'next/navigation';\n\nfunction SubmitButton({ children }: { children: React.ReactNode }) {\n  const { pending } = useFormStatus();\n  return (\n    <Button type=\"submit\" className=\"w-full\" disabled={pending}>\n      {pending ? 'Submitting...' : children}\n    </Button>\n  );\n}\n\nfunction GoogleSignInButton() {\n  const [isPending, startTransition] = useTransition();\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    console.log('auth-forms: Setting up onAuthStateChanged listener.');\n    const unsubscribe = onAuthStateChanged(auth, (firebaseUser: FirebaseAuthUser | null) => {\n      console.log('auth-forms: onAuthStateChanged triggered.');\n      if (firebaseUser) {\n        console.log('auth-forms: firebaseUser object received:', firebaseUser.displayName, firebaseUser.email);\n        startTransition(async () => {\n          try {\n            console.log('auth-forms: Getting ID token from firebaseUser...');\n            const idToken = await firebaseUser.getIdToken();\n            console.log('auth-forms: ID token received, calling verifyAndSignInAction...');\n            \n            const result = await verifyAndSignInAction(idToken);\n            console.log('auth-forms: Result from verifyAndSignInAction:', result);\n            \n            if (result.success) {\n              console.log('auth-forms: Server verification successful. Redirecting to /');\n              router.push('/');\n            } else {\n              console.error('auth-forms: Server verification failed:', result.message);\n              setError(result.message || 'An unknown error occurred on the server.');\n            }\n          } catch (e: any) {\n             console.error('auth-forms: Error during server verification transition:', e);\n             setError(`An error occurred during server verification: ${e.message}`);\n          }\n        });\n      } else {\n        console.log('auth-forms: firebaseUser is null (user signed out).');\n      }\n    });\n\n    // Cleanup subscription on component unmount\n    return () => {\n      console.log('auth-forms: Cleaning up onAuthStateChanged listener.');\n      unsubscribe();\n    };\n  }, [router]);\n\n\n  const handleGoogleSignIn = async () => {\n    setError(null);\n    const provider = new GoogleAuthProvider();\n    try {\n      console.log('auth-forms: Starting Google sign-in with popup.');\n      await signInWithPopup(auth, provider);\n      console.log('auth-forms: signInWithPopup promise resolved. Waiting for onAuthStateChanged.');\n    } catch (error: any) {\n      if (error.code === 'auth/popup-closed-by-user') {\n        console.log('auth-forms: Sign-in popup closed by user.');\n        setError('Sign-in cancelled. Please try again.');\n      } else if (error.code === 'auth/unauthorized-domain') {\n          console.error('auth-forms: Unauthorized domain error.');\n          setError('This domain is not authorized for Google Sign-In. Please contact support and add it to the Firebase console.');\n      } else {\n        console.error(\"auth-forms: Google sign-in error\", error);\n        setError(`Failed to sign in with Google. ${error.message}`);\n      }\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <Button\n        variant=\"outline\"\n        className=\"w-full\"\n        onClick={handleGoogleSignIn}\n        disabled={isPending}\n      >\n        {isPending ? 'Verifying...' : 'Sign in with Google'}\n      </Button>\n      {error && <p className=\"text-sm text-destructive\">{error}</p>}\n    </div>\n  );\n}\n\n\nexport function LoginForm() {\n  const [state, formAction] = useActionState(loginAction, null);\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-headline flex items-center gap-2\">\n          <LogIn className=\"w-6 h-6\" />\n          Login to OrderlyGather\n        </CardTitle>\n        <CardDescription>Enter your credentials to access your account.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <GoogleSignInButton />\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or continue with\n              </span>\n            </div>\n          </div>\n          <form action={formAction} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" name=\"email\" type=\"email\" placeholder=\"name@example.com\" required />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" required />\n            </div>\n            {state?.message && <p className=\"text-sm text-destructive\">{state.message}</p>}\n            <SubmitButton>Login with Email</SubmitButton>\n            <div className=\"mt-4 text-center text-sm\">\n              Don&apos;t have an account?{' '}\n              <Link href=\"/signup\" className=\"underline\">\n                Sign up\n              </Link>\n            </div>\n          </form>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function SignupForm() {\n    return (\n      <Card className=\"w-full max-w-md\">\n         <CardHeader>\n          <CardTitle className=\"text-2xl font-headline flex items-center gap-2\">\n            <UserPlus className=\"w-6 h-6\" />\n            Create an Account\n          </CardTitle>\n          <CardDescription>Join OrderlyGather by signing in with your Google account. Only accounts with an @iitdh.ac.in email are allowed.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <GoogleSignInButton />\n           <div className=\"mt-4 text-center text-sm\">\n            Already have an account?{' '}\n            <Link href=\"/login\" className=\"underline\">\n              Login\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }"],"names":[],"mappings":"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","debugId":null}}]
}