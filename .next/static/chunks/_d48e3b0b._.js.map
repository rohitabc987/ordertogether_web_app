{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n// @ts-nocheck\n'use server';\n\nimport { z } from 'zod';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { revalidatePath } from 'next/cache';\n\nimport { createPost, findUserByEmail, updateUser, createUserInDb, getUserById } from '@/lib/data';\nimport { auth as adminAuth } from 'firebase-admin';\nimport { db } from './firebase-admin';\n\nexport async function verifyAndSignInAction(idToken: string) {\n  console.log('actions: verifyAndSignInAction started.');\n  try {\n    if (!idToken) {\n      return { success: false, message: 'No token provided.' };\n    }\n    const decodedToken = await adminAuth().verifyIdToken(idToken);\n    console.log('actions: ID token verified successfully. Decoded token:', decodedToken);\n\n    const uid = decodedToken.uid;\n    const email = decodedToken.email;\n    const name = decodedToken.name;\n    const photoURL = decodedToken.picture;\n    const gender = decodedToken.gender || 'prefer_not_to_say';\n\n    if (!email || !name) {\n      console.error('actions: Google account missing email or name.');\n      return { success: false, message: 'Google account must have an email and name.' };\n    }\n\n    if (!email.endsWith('@iitdh.ac.in')) {\n      console.error(`actions: Email is not from @iitdh.ac.in domain: ${email}`);\n      return { success: false, message: `Only users with a @iitdh.ac.in email can sign up. Your email is ${email}.` };\n    }\n\n    console.log(`actions: Attempting to find user with email: ${email}`);\n    let user = await findUserByEmail(email);\n    let userId: string;\n\n    if (!user) {\n      console.log('actions: User not found. Creating new user in DB...');\n      const newUser = await createUserInDb({\n        name: name,\n        email: email,\n        photoURL: photoURL,\n        gender: gender\n      });\n      userId = newUser.id;\n      console.log('actions: New user created with ID:', userId);\n    } else {\n      userId = user.id;\n      console.log('actions: Existing user found with ID:', userId);\n    }\n\n    const cookieStore = cookies();\n    cookieStore.set('session_userId', userId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 1 day\n      path: '/',\n    });\n    cookieStore.set('session_authId', uid, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 1 day\n      path: '/',\n    });\n\n    revalidatePath('/');\n    console.log('actions: Session cookie set successfully.');\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('actions: Error during token verification:', error);\n    return { success: false, message: `Internal error: ${error.message}` };\n  }\n}\n\n\nexport async function logoutAction() {\n  const cookieStore = cookies();\n  const authId = cookieStore.get('session_authId')?.value;\n  if (authId) {\n    try {\n      await adminAuth().revokeRefreshTokens(authId);\n    } catch (error) {\n      console.error('Error revoking refresh tokens:', error);\n    }\n  }\n  cookieStore.delete('session_userId');\n  cookieStore.delete('session_authId');\n  redirect('/login');\n}\n\nconst postSchema = z.object({\n  title: z.string().min(1, 'Title is required.'),\n  restaurant: z.string().min(1, 'Restaurant is required.'),\n  totalAmount: z.coerce.number().min(0, 'Total amount must be positive.'),\n  contributionAmount: z.coerce.number().min(0, 'Contribution must be positive.'),\n  deadline: z.coerce.date(),\n  notes: z.string().optional(),\n  authorId: z.string(),\n});\n\nexport async function createPostAction(prevState: any, formData: FormData) {\n  const user = await getUserById(formData.get('authorId') as string);\n  if (!user || !user.userProfile.name || !user.contact.phone || !user.userProfile.gender || user.userProfile.gender === 'prefer_not_to_say') {\n    return { message: 'Please complete your profile (name, contact number, and gender) before posting.' };\n  }\n  \n  const data = Object.fromEntries(formData);\n\n  const parsed = postSchema.safeParse(data);\n\n  if (!parsed.success) {\n    console.error(parsed.error.flatten().fieldErrors);\n    const firstError = Object.values(parsed.error.flatten().fieldErrors)[0]?.[0];\n    return { message: firstError || 'Invalid post data. Please check your inputs.' };\n  }\n  \n  if (parsed.data.contributionAmount > parsed.data.totalAmount) {\n    return { message: 'Your contribution cannot be greater than the total order amount.' };\n  }\n\n  await createPost(parsed.data);\n  revalidatePath('/');\n  redirect('/');\n}\n\nconst profileSchema = z.object({\n  id: z.string(),\n  name: z.string().min(2, 'Name must be at least 2 characters.'),\n  contactNumber: z.string().min(10, 'Contact number must be at least 10 digits.'),\n  gender: z.enum(['male', 'female', 'other', 'prefer_not_to_say']),\n  institutionType: z.enum(['College/University', 'Hostel/PG/Apartment']).optional(),\n  institutionName: z.string().optional(),\n  area: z.string().optional(),\n  city: z.string().optional(),\n  pinCode: z.string().optional(),\n}).refine(data => data.gender !== 'prefer_not_to_say', {\n  message: \"Please select a gender.\",\n  path: [\"gender\"],\n});\n\nexport async function updateProfileAction(prevState: any, formData: FormData) {\n  const parsed = profileSchema.safeParse(Object.fromEntries(formData));\n\n  if (!parsed.success) {\n    return { message: 'Invalid profile data.' };\n  }\n\n  const { id, institutionType, institutionName, area, ...data } = parsed.data;\n\n  const updates: Record<string, any> = {\n    'userProfile.name': data.name,\n    'userProfile.gender': data.gender || null,\n    'contact.phone': data.contactNumber || null,\n    'contact.whatsapp': data.contactNumber || null, // Assuming phone and whatsapp are the same\n    'institution.institutionType': institutionType || null,\n    'institution.institutionName': institutionName || null,\n    'location.area': area || null,\n    'location.city': data.city || null,\n    'location.pinCode': data.pinCode || null,\n    'institution.hostelOrPG': null, // Explicitly remove this field\n  };\n\n  await updateUser(id, updates);\n\n  revalidatePath('/profile');\n  revalidatePath('/');\n  return { message: 'Profile updated successfully!' };\n}\n\nexport async function subscribeAction(plan: 'daily' | 'weekly' | 'monthly', userId: string) {\n  let expiryDays = 0;\n  if (plan === 'daily') expiryDays = 1;\n  if (plan === 'weekly') expiryDays = 7;\n  if (plan === 'monthly') expiryDays = 30;\n\n  const expiryDate = new Date();\n  expiryDate.setDate(expiryDate.getDate() + expiryDays);\n\n  await updateUser(userId, {\n    'subscription.status': 'active',\n    'subscription.plan': plan,\n    'subscription.expiry': expiryDate.toISOString(),\n  });\n\n  revalidatePath('/pricing');\n  revalidatePath('/');\n  revalidatePath('/profile');\n}\n\nconst feedbackSchema = z.object({\n  email: z.string().email().optional().or(z.literal('')),\n  feedback: z.string().min(10, 'Feedback must be at least 10 characters.'),\n});\n\nexport async function submitFeedbackAction(prevState: any, formData: FormData) {\n  try {\n    const data = Object.fromEntries(formData);\n    const parsed = feedbackSchema.safeParse(data);\n\n    if (!parsed.success) {\n      const firstError = Object.values(parsed.error.flatten().fieldErrors)[0]?.[0];\n      return { success: false, message: firstError || 'Invalid data.' };\n    }\n\n    const feedbackData = {\n      email: parsed.data.email || null,\n      feedback: parsed.data.feedback,\n      createdAt: new Date(),\n    };\n\n    await db.collection('feedback').add(feedbackData);\n\n    return { success: true, message: 'Thank you for your feedback!' };\n  } catch (error) {\n    return { success: false, message: 'Something went wrong. Please try again.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAyMsB,uBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/feedback/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useActionState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { submitFeedbackAction } from '@/lib/actions';\nimport { useAuth } from '@/providers';\n\nexport default function FeedbackPage() {\n  const { user } = useAuth();\n  const [state, formAction] = useActionState(submitFeedbackAction, null);\n  const formRef = useRef<HTMLFormElement>(null);\n\n  useEffect(() => {\n    if (state?.success) {\n      formRef.current?.reset();\n    }\n  }, [state]);\n\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      <Card className=\"max-w-2xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-3xl font-headline\">Give Feedback</CardTitle>\n          <CardDescription>\n            Your feedback is valuable to us. Let us know how we can improve.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form ref={formRef} action={formAction} className=\"space-y-6\">\n            {user ? (\n              <input type=\"hidden\" name=\"email\" value={user.contact.email} />\n            ) : (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Your Email (Optional)</Label>\n                <Input id=\"email\" name=\"email\" type=\"email\" placeholder=\"you@example.com\" />\n              </div>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"feedback\">Your Feedback</Label>\n              <Textarea id=\"feedback\" name=\"feedback\" placeholder=\"Tell us what you think...\" rows={5} required />\n            </div>\n            \n            {state?.message && (\n              <p className={state.success ? 'text-sm text-green-600' : 'text-sm text-destructive'}>\n                {state.message}\n              </p>\n            )}\n\n            <Button type=\"submit\" className=\"w-full\">Submit Feedback</Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AATA;;;;;;;;;AAWe,SAAS;;IACtB,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD;IACvB,MAAM,CAAC,OAAO,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,iBAAc,AAAD,EAAE,qJAAA,CAAA,uBAAoB,EAAE;IACjE,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAmB;IAExC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,IAAI,OAAO,SAAS;gBAClB,QAAQ,OAAO,EAAE;YACnB;QACF;iCAAG;QAAC;KAAM;IAEV,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,mIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,6LAAC,mIAAA,CAAA,aAAU;;sCACT,6LAAC,mIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAyB;;;;;;sCAC9C,6LAAC,mIAAA,CAAA,kBAAe;sCAAC;;;;;;;;;;;;8BAInB,6LAAC,mIAAA,CAAA,cAAW;8BACV,cAAA,6LAAC;wBAAK,KAAK;wBAAS,QAAQ;wBAAY,WAAU;;4BAC/C,qBACC,6LAAC;gCAAM,MAAK;gCAAS,MAAK;gCAAQ,OAAO,KAAK,OAAO,CAAC,KAAK;;;;;qDAE3D,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,oIAAA,CAAA,QAAK;wCAAC,SAAQ;kDAAQ;;;;;;kDACvB,6LAAC,oIAAA,CAAA,QAAK;wCAAC,IAAG;wCAAQ,MAAK;wCAAQ,MAAK;wCAAQ,aAAY;;;;;;;;;;;;0CAI5D,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,oIAAA,CAAA,QAAK;wCAAC,SAAQ;kDAAW;;;;;;kDAC1B,6LAAC,uIAAA,CAAA,WAAQ;wCAAC,IAAG;wCAAW,MAAK;wCAAW,aAAY;wCAA4B,MAAM;wCAAG,QAAQ;;;;;;;;;;;;4BAGlG,OAAO,yBACN,6LAAC;gCAAE,WAAW,MAAM,OAAO,GAAG,2BAA2B;0CACtD,MAAM,OAAO;;;;;;0CAIlB,6LAAC,qIAAA,CAAA,SAAM;gCAAC,MAAK;gCAAS,WAAU;0CAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMrD;GAhDwB;;QACL,oHAAA,CAAA,UAAO;QACI,6JAAA,CAAA,iBAAc;;;KAFpB","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40radix-ui/react-label/src/label.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelElement = React.ElementRef<typeof Primitive.label>;\ntype PrimitiveLabelProps = React.ComponentPropsWithoutRef<typeof Primitive.label>;\ninterface LabelProps extends PrimitiveLabelProps {}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  return (\n    <Primitive.label\n      {...props}\n      ref={forwardedRef}\n      onMouseDown={(event) => {\n        // only prevent text selection if clicking inside the label itself\n        const target = event.target as HTMLElement;\n        if (target.closest('button, input, select, textarea')) return;\n\n        props.onMouseDown?.(event);\n        // prevent text selection when double clicking label\n        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n      }}\n    />\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n};\nexport type { LabelProps };\n"],"names":[],"mappings":";;;;;AAAA,YAAY,WAAW;AACvB,SAAS,iBAAiB;AActB;;;;;AARJ,IAAM,OAAO;AAMb,IAAM,0KAAc,aAAA,EAAqC,CAAC,OAAO,iBAAiB;IAChF,OACE,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,2KAAC,YAAA,CAAU,KAAA,EAAV;QACE,GAAG,KAAA;QACJ,KAAK;QACL,aAAa,CAAC,UAAU;YAEtB,MAAM,SAAS,MAAM,MAAA;YACrB,IAAI,OAAO,OAAA,CAAQ,iCAAiC,EAAG,CAAA;YAEvD,MAAM,WAAA,GAAc,KAAK;YAEzB,IAAI,CAAC,MAAM,gBAAA,IAAoB,MAAM,MAAA,GAAS,EAAG,CAAA,MAAM,cAAA,CAAe;QACxE;IAAA;AAGN,CAAC;AAED,MAAM,WAAA,GAAc;AAIpB,IAAM,OAAO","ignoreList":[0],"debugId":null}}]
}