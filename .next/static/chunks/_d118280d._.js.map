{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n// @ts-nocheck\n'use server';\n\nimport { z } from 'zod';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { revalidatePath } from 'next/cache';\n\nimport { createPost, findUserByEmail, updateUser, createUserInDb, getUserById, deletePost, updatePost, getPostById } from '@/lib/data';\nimport { auth as adminAuth } from 'firebase-admin';\nimport { db } from './firebase-admin';\n\nexport async function verifyAndSignInAction(idToken: string) {\n  console.log('actions: verifyAndSignInAction started.');\n  try {\n    if (!idToken) {\n      return { success: false, message: 'No token provided.' };\n    }\n    const decodedToken = await adminAuth().verifyIdToken(idToken);\n    console.log('actions: ID token verified successfully. Decoded token:', decodedToken);\n\n    const uid = decodedToken.uid;\n    const email = decodedToken.email;\n    const name = decodedToken.name;\n    const photoURL = decodedToken.picture;\n    const gender = decodedToken.gender || 'prefer_not_to_say';\n\n    if (!email || !name) {\n      console.error('actions: Google account missing email or name.');\n      return { success: false, message: 'Google account must have an email and name.' };\n    }\n\n    if (!email.endsWith('@iitdh.ac.in')) {\n      console.error(`actions: Email is not from @iitdh.ac.in domain: ${email}`);\n      return { success: false, message: `Only users with a @iitdh.ac.in email can sign up. Your email is ${email}.` };\n    }\n\n    console.log(`actions: Attempting to find user with email: ${email}`);\n    let user = await findUserByEmail(email);\n    let userId: string;\n\n    if (!user) {\n      console.log('actions: User not found. Creating new user in DB...');\n      const newUser = await createUserInDb({\n        name: name,\n        email: email,\n        photoURL: photoURL,\n        gender: gender\n      });\n      userId = newUser.id;\n      console.log('actions: New user created with ID:', userId);\n    } else {\n      userId = user.id;\n      console.log('actions: Existing user found with ID:', userId);\n    }\n\n    const cookieStore = cookies();\n    cookieStore.set('session_userId', userId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 1 day\n      path: '/',\n    });\n    cookieStore.set('session_authId', uid, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 1 day\n      path: '/',\n    });\n\n    revalidatePath('/');\n    console.log('actions: Session cookie set successfully.');\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('actions: Error during token verification:', error);\n    return { success: false, message: `Internal error: ${error.message}` };\n  }\n}\n\n\nexport async function logoutAction() {\n  const cookieStore = cookies();\n  const authId = cookieStore.get('session_authId')?.value;\n  if (authId) {\n    try {\n      await adminAuth().revokeRefreshTokens(authId);\n    } catch (error) {\n      console.error('Error revoking refresh tokens:', error);\n    }\n  }\n  cookieStore.delete('session_userId');\n  cookieStore.delete('session_authId');\n  revalidatePath('/');\n}\n\nconst postSchema = z.object({\n  title: z.string().min(1, 'Title is required.'),\n  restaurant: z.string().min(1, 'Restaurant is required.'),\n  totalAmount: z.coerce.number().min(0, 'Total amount must be positive.'),\n  contributionAmount: z.coerce.number().min(0, 'Contribution must be positive.'),\n  deadline: z.coerce.date(),\n  notes: z.string().optional(),\n  authorId: z.string(),\n});\n\nexport async function createPostAction(prevState: any, formData: FormData) {\n  const authorId = formData.get('authorId') as string;\n  const user = await getUserById(authorId);\n\n  if (!user || !user.userProfile.name || !user.contact.phone || !user.userProfile.gender || user.userProfile.gender === 'prefer_not_to_say') {\n    return { message: 'Please complete your profile (name, contact number, and gender) before posting.' };\n  }\n  \n  const data = Object.fromEntries(formData);\n\n  const parsed = postSchema.safeParse(data);\n\n  if (!parsed.success) {\n    console.error(parsed.error.flatten().fieldErrors);\n    const firstError = Object.values(parsed.error.flatten().fieldErrors)[0]?.[0];\n    return { message: firstError || 'Invalid post data. Please check your inputs.' };\n  }\n  \n  if (parsed.data.contributionAmount > parsed.data.totalAmount) {\n    return { message: 'Your contribution cannot be greater than the total order amount.' };\n  }\n\n  // Denormalize user data into the post\n  const postDataWithDenormalization = {\n    ...parsed.data,\n    institutionName: user.institution?.institutionName || null,\n    area: user.location?.area || null,\n    city: user.location?.city || null,\n    authorName: user.userProfile.name,\n    authorGender: user.userProfile.gender,\n  };\n\n  await createPost(postDataWithDenormalization);\n  revalidatePath('/');\n  redirect('/');\n}\n\nconst updatePostSchema = postSchema.omit({ authorId: true }).extend({\n  postId: z.string(),\n});\n\nexport async function updatePostAction(prevState: any, formData: FormData) {\n  const data = Object.fromEntries(formData);\n  const parsed = updatePostSchema.safeParse(data);\n\n  if (!parsed.success) {\n      return { message: 'Invalid post data. Please check your inputs.' };\n  }\n  \n  const post = await getPostById(parsed.data.postId);\n  if (!post) {\n      return { message: 'Post not found.' };\n  }\n\n  if (post.updatedAt) {\n      return { message: 'This post has already been updated once and cannot be edited again.' };\n  }\n\n  if (parsed.data.contributionAmount > parsed.data.totalAmount) {\n      return { message: 'Your contribution cannot be greater than the total order amount.' };\n  }\n\n  await updatePost(parsed.data.postId, parsed.data);\n  revalidatePath('/my-posts');\n  redirect('/my-posts?message=Changes saved successfully. You cannot edit this post again.');\n}\n\nexport async function deletePostAction(postId: string) {\n  await deletePost(postId);\n  revalidatePath('/my-posts');\n}\n\n\nconst profileSchema = z.object({\n  id: z.string(),\n  name: z.string().min(2, 'Name must be at least 2 characters.'),\n  contactNumber: z.string().min(10, 'Contact number must be at least 10 digits.'),\n  gender: z.enum(['male', 'female', 'other', 'prefer_not_to_say']),\n  institutionType: z.enum(['College/University', 'Hostel/PG/Apartment']).optional(),\n  institutionName: z.string().optional(),\n  area: z.string().optional(),\n  city: z.string().optional(),\n  pinCode: z.string().optional(),\n}).refine(data => data.gender !== 'prefer_not_to_say', {\n  message: \"Please select a gender.\",\n  path: [\"gender\"],\n});\n\nexport async function updateProfileAction(prevState: any, formData: FormData) {\n  const parsed = profileSchema.safeParse(Object.fromEntries(formData));\n\n  if (!parsed.success) {\n    return { message: 'Invalid profile data.' };\n  }\n\n  const { id, institutionType, institutionName, area, ...data } = parsed.data;\n\n  const updates: Record<string, any> = {\n    'userProfile.name': data.name,\n    'userProfile.gender': data.gender || null,\n    'contact.phone': data.contactNumber || null,\n    'contact.whatsapp': data.contactNumber || null, // Assuming phone and whatsapp are the same\n    'institution.institutionType': institutionType || null,\n    'institution.institutionName': institutionName || null,\n    'location.area': area || null,\n    'location.city': data.city || null,\n    'location.pinCode': data.pinCode || null,\n    'institution.hostelOrPG': null, // Explicitly remove this field\n  };\n\n  await updateUser(id, updates);\n\n  revalidatePath('/profile');\n  revalidatePath('/');\n  return { message: 'Profile updated successfully!' };\n}\n\nexport async function subscribeAction(plan: 'daily' | 'weekly' | 'monthly', userId: string) {\n  let expiryDays = 0;\n  if (plan === 'daily') expiryDays = 1;\n  if (plan === 'weekly') expiryDays = 7;\n  if (plan === 'monthly') expiryDays = 30;\n\n  const expiryDate = new Date();\n  expiryDate.setDate(expiryDate.getDate() + expiryDays);\n\n  await updateUser(userId, {\n    'subscription.status': 'active',\n    'subscription.plan': plan,\n    'subscription.expiry': expiryDate.toISOString(),\n  });\n\n  revalidatePath('/pricing');\n  revalidatePath('/');\n  revalidatePath('/profile');\n}\n\nconst feedbackSchema = z.object({\n  email: z.string().email().optional().or(z.literal('')),\n  feedback: z.string().min(10, 'Feedback must be at least 10 characters.'),\n});\n\nexport async function submitFeedbackAction(prevState: any, formData: FormData) {\n  try {\n    const data = Object.fromEntries(formData);\n    const parsed = feedbackSchema.safeParse(data);\n\n    if (!parsed.success) {\n      const firstError = Object.values(parsed.error.flatten().fieldErrors)[0]?.[0];\n      return { success: false, message: firstError || 'Invalid data.' };\n    }\n\n    const feedbackData = {\n      email: parsed.data.email || null,\n      feedback: parsed.data.feedback,\n      createdAt: new Date(),\n    };\n\n    await db.collection('feedback').add(feedbackData);\n\n    return { success: true, message: 'Thank you for your feedback!' };\n  } catch (error) {\n    return { success: false, message: 'Something went wrong. Please try again.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAasB,wBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/auth-forms.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useTransition } from 'react';\nimport { verifyAndSignInAction } from '@/lib/actions';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { LogIn } from 'lucide-react';\nimport { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { auth as getAuthInstance } from '@/lib/firebase';\nimport { useRouter } from 'next/navigation';\n\nexport function AuthForm() {\n  const [isPending, startTransition] = useTransition();\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n\n  const handleGoogleSignIn = async () => {\n      const auth = getAuthInstance;\n      if (!auth) {\n        setError(\"Authentication service is not available. Please try again later.\");\n        return;\n      }\n      setError(null);\n      startTransition(async () => {\n        try {\n          const provider = new GoogleAuthProvider();\n          const result = await signInWithPopup(auth, provider);\n          const idToken = await result.user.getIdToken();\n          const actionResult = await verifyAndSignInAction(idToken);\n          if (actionResult.success) {\n            router.push('/');\n          } else {\n            setError(actionResult.message ?? 'Sign in failed after authentication.');\n          }\n        } catch (e: any) {\n          if (e.code === 'auth/popup-closed-by-user') {\n            setError('Sign-in popup closed before completion.');\n          } else {\n            setError(e.message ?? 'An unexpected error occurred during sign-in.');\n          }\n        }\n      });\n    };\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"text-2xl font-headline\">Welcome Back</CardTitle>\n        <CardDescription>Sign in with your Google account to continue.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {error && (\n          <p className=\"text-center text-sm font-medium text-destructive\">\n            {error}\n          </p>\n        )}\n        <Button \n          className=\"w-full\" \n          onClick={handleGoogleSignIn} \n          disabled={isPending}\n        >\n          {isPending ? (\n            'Signing in...'\n          ) : (\n            <>\n              <LogIn className=\"mr-2 h-4 w-4\" /> Sign in with Google\n            </>\n          )}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function LoginForm() {\n  return <AuthForm />;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AATA;;;;;;;;;AAWO,SAAS;;IACd,MAAM,CAAC,WAAW,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD;IACjD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,qBAAqB;QACvB,MAAM,OAAO,yHAAA,CAAA,OAAe;QAC5B,IAAI,CAAC,MAAM;YACT,SAAS;YACT;QACF;QACA,SAAS;QACT,gBAAgB;YACd,IAAI;gBACF,MAAM,WAAW,IAAI,oPAAA,CAAA,qBAAkB;gBACvC,MAAM,SAAS,MAAM,CAAA,GAAA,iPAAA,CAAA,kBAAe,AAAD,EAAE,MAAM;gBAC3C,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,UAAU;gBAC5C,MAAM,eAAe,MAAM,CAAA,GAAA,qJAAA,CAAA,wBAAqB,AAAD,EAAE;gBACjD,IAAI,aAAa,OAAO,EAAE;oBACxB,OAAO,IAAI,CAAC;gBACd,OAAO;oBACL,SAAS,aAAa,OAAO,IAAI;gBACnC;YACF,EAAE,OAAO,GAAQ;gBACf,IAAI,EAAE,IAAI,KAAK,6BAA6B;oBAC1C,SAAS;gBACX,OAAO;oBACL,SAAS,EAAE,OAAO,IAAI;gBACxB;YACF;QACF;IACF;IAEF,qBACE,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,6LAAC,mIAAA,CAAA,aAAU;gBAAC,WAAU;;kCACpB,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;kCAAyB;;;;;;kCAC9C,6LAAC,mIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;;oBACpB,uBACC,6LAAC;wBAAE,WAAU;kCACV;;;;;;kCAGL,6LAAC,qIAAA,CAAA,SAAM;wBACL,WAAU;wBACV,SAAS;wBACT,UAAU;kCAET,YACC,gCAEA;;8CACE,6LAAC,2MAAA,CAAA,QAAK;oCAAC,WAAU;;;;;;gCAAiB;;;;;;;;;;;;;;;;;;;;AAOhD;GA7DgB;;QACuB,6JAAA,CAAA,gBAAa;QAEnC,qIAAA,CAAA,YAAS;;;KAHV;AA+DT,SAAS;IACd,qBAAO,6LAAC;;;;;AACV;MAFgB","debugId":null}}]
}