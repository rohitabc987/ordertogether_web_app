{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase-admin.ts"],"sourcesContent":["import admin from 'firebase-admin';\nimport getConfig from 'next/config';\n\n// Important: You must generate a service account key in the Firebase console,\n// Base64-encode the entire JSON file, and set it as a single environment variable.\n// DO NOT hardcode the service account key in your code.\n// For local development, you can create a `.env` file with the variable.\n\nfunction initializeAdminApp() {\n  if (admin.apps.length > 0) {\n    return admin.app();\n  }\n\n  const { serverRuntimeConfig } = getConfig();\n  const base64ServiceAccount = serverRuntimeConfig.FIREBASE_SERVICE_ACCOUNT_BASE64;\n\n  if (!base64ServiceAccount) {\n    throw new Error('FIREBASE_SERVICE_ACCOUNT_BASE64 is not set in next.config.js. Please check your configuration.');\n  }\n\n  try {\n    // Decode the Base64 string to get the JSON string\n    const serviceAccountJson = Buffer.from(base64ServiceAccount, 'base64').toString('utf8');\n    const serviceAccount = JSON.parse(serviceAccountJson);\n\n    return admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount)\n    });\n  } catch (error: any) {\n    console.error('Firebase admin initialization error', error);\n    // Throw a more descriptive error to help with debugging.\n    throw new Error(`Firebase admin initialization failed: ${error.message}. Ensure FIREBASE_SERVICE_ACCOUNT_BASE64 is a valid Base64-encoded service account JSON.`);\n  }\n}\n\nconst adminApp = initializeAdminApp();\nexport const db = adminApp.firestore();\nexport const auth = adminApp.auth();\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,8EAA8E;AAC9E,mFAAmF;AACnF,wDAAwD;AACxD,yEAAyE;AAEzE,SAAS;IACP,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACzB,OAAO,2HAAA,CAAA,UAAK,CAAC,GAAG;IAClB;IAEA,MAAM,EAAE,mBAAmB,EAAE,GAAG,CAAA,GAAA,8HAAA,CAAA,UAAS,AAAD;IACxC,MAAM,uBAAuB,oBAAoB,+BAA+B;IAEhF,IAAI,CAAC,sBAAsB;QACzB,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,kDAAkD;QAClD,MAAM,qBAAqB,OAAO,IAAI,CAAC,sBAAsB,UAAU,QAAQ,CAAC;QAChF,MAAM,iBAAiB,KAAK,KAAK,CAAC;QAElC,OAAO,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YACzB,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;QACpC;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uCAAuC;QACrD,yDAAyD;QACzD,MAAM,IAAI,MAAM,CAAC,sCAAsC,EAAE,MAAM,OAAO,CAAC,wFAAwF,CAAC;IAClK;AACF;AAEA,MAAM,WAAW;AACV,MAAM,KAAK,SAAS,SAAS;AAC7B,MAAM,OAAO,SAAS,IAAI","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["\n// @ts-nocheck\nimport type { User, Post } from './types';\nimport { db } from './firebase-admin';\nimport { cache } from 'react';\nimport { Timestamp, FieldPath, type Query } from 'firebase-admin/firestore';\n\nconst usersCollection = db.collection('users');\nconst postsCollection = db.collection('posts');\nconst appDataCollection = db.collection('app_data');\n\n// Helper function to convert Firestore Timestamps to JS Dates\nfunction convertTimestamps(obj: any): any {\n  if (!obj) return obj;\n  if (Array.isArray(obj)) {\n    return obj.map(convertTimestamps);\n  }\n  if (obj instanceof Timestamp) {\n    // When serializing for the client, toISOString() is a good, standard format.\n    return obj.toDate().toISOString();\n  }\n  if (typeof obj === 'object') {\n    const newObj: { [key: string]: any } = {};\n    for (const key in obj) {\n      newObj[key] = convertTimestamps(obj[key]);\n    }\n    return newObj;\n  }\n  return obj;\n}\n\nexport const getAuthorAndInstitution = cache(async (authorId: string): Promise<{ authorData: User; institutionId: string; } | null> => {\n  try {\n    const userDoc = await usersCollection.doc(authorId).get();\n    if (!userDoc.exists) return null;\n\n    const authorData = { id: userDoc.id, ...userDoc.data() } as User;\n    const institutionId = authorData.institution?.institutionName;\n\n    if (!institutionId) {\n      console.warn(`User ${authorId} does not have an institutionId.`);\n      return null;\n    }\n    return { authorData: convertTimestamps(authorData), institutionId };\n  } catch (error) {\n    console.error('Error fetching user and institution:', error);\n    return null;\n  }\n});\n\n\nexport const findUserByEmail = cache(async (email: string): Promise<User | undefined> => {\n  console.log(`data: findUserByEmail called for: ${email}`);\n  const snapshot = await usersCollection.where('contact.email', '==', email).limit(1).get();\n  if (snapshot.empty) {\n    console.log(`data: No user found with email: ${email}`);\n    return undefined;\n  }\n  const userDoc = snapshot.docs[0];\n  const userData = { id: userDoc.id, ...userDoc.data() } as User;\n  console.log(`data: User found with ID: ${userDoc.id}`, userData);\n  return convertTimestamps(userData);\n});\n\nexport const getUserById = cache(async (userId: string): Promise<User | undefined> => {\n  console.log(`data: getUserById called for ID: ${userId}`);\n  const userDoc = await usersCollection.doc(userId).get();\n  if (!userDoc.exists) {\n    console.log(`data: No user found with ID: ${userId}`);\n    return undefined;\n  }\n  const userData = { id: userDoc.id, ...userDoc.data() } as User;\n  // Convert timestamps for client-side usage\n  return convertTimestamps(userData);\n});\n\nasync function joinAuthorToPosts(posts: any[]): Promise<Post[]> {\n  if (posts.length === 0) return [];\n\n  const authorIds = [...new Set(posts.map(p => p.authorId).filter(Boolean))];\n  \n  const authors = {};\n  if (authorIds.length > 0) {\n    const authorPromises = authorIds.map(id => getUserById(id));\n    const authorResults = await Promise.all(authorPromises);\n    authorResults.forEach(author => {\n      if (author) {\n        authors[author.id] = author;\n      }\n    });\n  }\n\n  const joinedPosts = posts.map(post => ({\n    ...post,\n    author: authors[post.authorId] || null,\n  })).filter(p => p.author !== null);\n\n  // This is the critical fix: convert timestamps AFTER joining the author.\n  return convertTimestamps(joinedPosts);\n}\n\nexport const getPostsForUser = cache(async (user: User | null): Promise<Post[]> => {\n  let query: Query = postsCollection;\n\n  if (user?.institution?.institutionName) {\n    query = query.where('location.institutionName', '==', user.institution.institutionName);\n  } else {\n    // Only apply ordering when not filtering by institution to avoid composite index need\n    query = query.orderBy('timestamps.createdAt', 'desc');\n  }\n\n  query = query.limit(25);\n\n  const snapshot = await query.get();\n  \n  let posts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n  // Manually sort if we didn't do it in the query\n  if (user?.institution?.institutionName) {\n    posts.sort((a, b) => b.timestamps.createdAt.toMillis() - a.timestamps.createdAt.toMillis());\n  }\n\n  // Exclude posts made by the current user from their own feed\n  if (user) {\n    posts = posts.filter(post => post.authorId !== user.id);\n  }\n\n  const postsWithAuthors = await joinAuthorToPosts(posts);\n  \n  return postsWithAuthors;\n});\n\n\nexport const getPostsByAuthorId = cache(async (authorId: string): Promise<Post[]> => {\n  const snapshot = await postsCollection.where('authorId', '==', authorId).get();\n  let posts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n  // Manual sort to avoid composite index\n  posts.sort((a, b) => b.timestamps.createdAt.toMillis() - a.timestamps.createdAt.toMillis());\n  \n  const postsWithAuthors = await joinAuthorToPosts(posts);\n  \n  return postsWithAuthors;\n});\n\nexport async function updatePost(postId: string, updates: Partial<Post>): Promise<void> {\n  await postsCollection.doc(postId).update({\n    ...updates,\n    'timestamps.updatedAt': new Date(),\n  });\n}\n\nexport async function deletePost(postId: string): Promise<void> {\n  await postsCollection.doc(postId).delete();\n}\n\nexport const getPostById = cache(async (postId: string): Promise<Post | null> => {\n  const postDoc = await postsCollection.doc(postId).get();\n  if (!postDoc.exists) {\n    return null;\n  }\n  const postData = { id: postDoc.id, ...postDoc.data() };\n  const postsWithAuthor = await joinAuthorToPosts([postData]);\n  return postsWithAuthor[0] || null; // Return null if author join fails\n});\n\nexport async function updateUser(userId: string, updates: Record<string, any>): Promise<User> {\n  await usersCollection.doc(userId).update(updates);\n  const updatedUser = await getUserById(userId);\n  if (!updatedUser) {\n    throw new Error('User not found after update');\n  }\n  return updatedUser;\n}\n\nexport async function createUserInDb(data: { name: string; email: string; photoURL?: string | null; }): Promise<User> {\n  console.log(`data: createUserInDb called for email: ${data.email}`);\n  const newUserTemplate: Omit<User, 'id'> = {\n    userProfile: {\n      name: data.name,\n      gender: 'prefer_not_to_say',\n      photoURL: data.photoURL || null,\n    },\n    contact: {\n      email: data.email,\n      phone: null,\n      shareContact: true,\n    },\n    location: {\n      area: null,\n      city: null,\n      pinCode: null,\n    },\n    institution: {\n      institutionType: null,\n      institutionName: null,\n    },\n    subscription: {\n      status: 'inactive',\n      plan: null,\n      startDate: null,\n      expiry: null,\n      postsViewed: 0,\n    },\n  };\n\n  console.log('data: Writing new user data to Firestore:', newUserTemplate);\n  const docRef = await usersCollection.add(newUserTemplate);\n  console.log(`data: New user document created with ID: ${docRef.id}`);\n  const newUserDoc = await docRef.get();\n\n  const result = { id: docRef.id, ...newUserDoc.data() } as User;\n  console.log('data: Returning new user object:', result);\n  return convertTimestamps(result);\n}\n\nexport const getBannerImageUrl = cache(async (): Promise<string | null> => {\n  try {\n    const snapshot = await appDataCollection.limit(1).get();\n    if (snapshot.empty) {\n      console.log('data: No document found in app_data collection.');\n      return null;\n    }\n    const doc = snapshot.docs[0];\n    const data = doc.data();\n    return data.banner_img || null;\n  } catch (error) {\n    console.error('Error fetching banner image URL:', error);\n    return null;\n  }\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n\n\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { Post, User } from './types';\nimport {FieldValue,Timestamp,} from 'firebase-admin/firestore';\nimport { db as adminDb, auth as adminAuth } from './firebase-admin';\nimport { cookies } from 'next/headers';\nimport { findUserByEmail, createUserInDb, getAuthorAndInstitution } from './data';\n\nfunction convertFirestoreTimestampToDate(timestamp: any): Date | null {\n  if (!timestamp) {\n    return null;\n  }\n  if (typeof timestamp.seconds === 'number' && typeof timestamp.nanoseconds === 'number') {\n    return new Date(timestamp.seconds * 1000 + timestamp.nanoseconds / 1000000);\n  }\n  const date = new Date(timestamp);\n  if (!isNaN(date.getTime())) {\n    return date;\n  }\n  return null;\n}\n\nexport async function createPostAction(prevState: any, formData: FormData) {\n  const authorId = formData.get('authorId') as string;\n\n  try {\n    const authorResult = await getAuthorAndInstitution(authorId);\n    if (!authorResult) {\n      return { message: 'Error: Could not find author or institution.' };\n    }\n\n    const { authorData } = authorResult;\n\n    const deadlineStr = formData.get('timestamps.deadline') as string;\n    const deadline = Timestamp.fromDate(new Date(deadlineStr));\n\n    const newPost: Omit<Post, 'id' | 'author'> = {\n      authorId,\n      authorInfo: {\n        authorName: authorData.userProfile.name,\n        gender: authorData.userProfile.gender || 'prefer_not_to_say',\n      },\n      details: {\n        title: formData.get('details.title') as string,\n        restaurant: formData.get('details.restaurant') as string,\n        notes: formData.get('details.notes') as string,\n      },\n      order: {\n        totalAmount: parseFloat(formData.get('order.totalAmount') as string),\n        contributionAmount: parseFloat(formData.get('order.contributionAmount') as string),\n      },\n      timestamps: {\n        createdAt: FieldValue.serverTimestamp() as any,\n        updatedAt: FieldValue.serverTimestamp() as any,\n        deadline: deadline as any,\n      },\n      location: {\n        institutionName: authorData.institution?.institutionName ?? undefined,\n        area: authorData.location?.area ?? undefined,\n        city: authorData.location?.city ?? undefined,\n      },\n    };\n\n    await adminDb.collection('posts').add(newPost);\n    \n    revalidatePath('/');\n    revalidatePath('/my-posts');\n\n    return { message: 'Post created successfully!' };\n\n  } catch (error) {\n    console.error('Error creating post:', error);\n    return { message: `Error creating post: ${error instanceof Error ? error.message : 'Unknown error'}` };\n  }\n}\n\nexport async function deletePostAction(postId: string) {\n    try {\n        await adminDb.collection('posts').doc(postId).delete();\n        revalidatePath('/my-posts');\n        return { success: true, message: 'Post deleted successfully.' };\n    } catch (error) {\n        console.error('Error deleting post:', error);\n        return { success: false, message: 'Failed to delete post.' };\n    }\n}\n\nexport async function updatePostAction(prevState: any, formData: FormData) {\n    const postId = formData.get('postId') as string;\n    if (!postId) {\n        return { message: 'Error: Post ID is missing.' };\n    }\n\n    try {\n        const deadlineStr = formData.get('timestamps.deadline') as string;\n        const deadline = Timestamp.fromDate(new Date(deadlineStr));\n\n        const updates = {\n            'details.title': formData.get('details.title') as string,\n            'details.restaurant': formData.get('details.restaurant') as string,\n            'details.notes': formData.get('details.notes') as string,\n            'order.totalAmount': parseFloat(formData.get('order.totalAmount') as string),\n            'order.contributionAmount': parseFloat(formData.get('order.contributionAmount') as string),\n            'timestamps.deadline': deadline,\n            'timestamps.updatedAt': FieldValue.serverTimestamp(),\n        };\n\n        await adminDb.collection('posts').doc(postId).update(updates);\n\n        revalidatePath('/');\n        revalidatePath('/my-posts');\n        revalidatePath(`/edit-post/${postId}`);\n\n        return { message: 'Post updated successfully!' };\n    } catch (error) {\n        console.error(`Error updating post ${postId}:`, error);\n        return { message: `Error updating post: ${error instanceof Error ? error.message : 'Unknown error'}` };\n    }\n}\n\n\nexport async function updateProfileAction(prevState: any, formData: FormData) {\n    const userId = formData.get('id') as string;\n    if (!userId) {\n        return { message: 'Error: User ID is missing.' };\n    }\n\n    const oneWeek = 7 * 24 * 60 * 60 * 1000;\n\n    try {\n        const userRef = adminDb.collection('users').doc(userId);\n        const userDoc = await userRef.get();\n        if (!userDoc.exists) {\n            return { message: 'Error: User not found.' };\n        }\n        \n        const userData = userDoc.data() as User;\n        const lastUpdateStr = userData.userProfile?.lastProfileUpdate;\n        \n        if (lastUpdateStr) {\n            const lastUpdate = new Date(lastUpdateStr);\n            if ((new Date().getTime() - lastUpdate.getTime()) < oneWeek) {\n                 return { message: 'Profile can only be updated once a week.' };\n            }\n        }\n        \n        const updates: Record<string, any> = {\n            'userProfile.name': formData.get('name'),\n            'userProfile.lastProfileUpdate': FieldValue.serverTimestamp(),\n            'contact.phone': formData.get('contactNumber'),\n            'contact.shareContact': formData.get('shareContact') === 'on',\n            'institution.institutionType': formData.get('institutionType'),\n            'institution.institutionName': formData.get('institutionName'),\n            'location.area': formData.get('area'),\n            'location.city': formData.get('city'),\n            'location.pinCode': formData.get('pinCode'),\n        };\n\n        await userRef.update(updates);\n        \n        revalidatePath('/profile');\n        revalidatePath('/');\n\n        return { message: 'Profile updated successfully!' };\n    } catch (error) {\n        console.error('Error updating profile:', error);\n        return { message: `Error updating profile: ${error instanceof Error ? error.message : 'Unknown error'}` };\n    }\n}\n\n\nexport async function deactivateSinglePostPassAction(userId: string) {\n  try {\n    const userRef = adminDb.collection('users').doc(userId);\n    const userDoc = await userRef.get();\n\n    if (!userDoc.exists) {\n      return { success: false, message: 'User not found.' };\n    }\n\n    const user = userDoc.data() as User;\n\n    if (user.subscription?.plan === 'single-post' && user.subscription?.status === 'active') {\n      await userRef.update({\n        'subscription.status': 'inactive',\n        'subscription.postsViewed': 1, \n      });\n\n      revalidatePath('/'); \n\n      return { success: true, message: 'Single-post pass used and deactivated.' };\n    } else {\n      return { success: false, message: 'No active single-post pass to deactivate.' };\n    }\n  } catch (error) {\n    console.error('Error deactivating single-post pass:', error);\n    return { success: false, message: 'An unexpected error occurred.' };\n  }\n}\n\n\nexport async function verifyAndSignInAction(idToken: string) {\n  try {\n    const decodedToken = await adminAuth.verifyIdToken(idToken);\n    const uid = decodedToken.uid;\n    const email = decodedToken.email;\n\n    if (!email) {\n      return { success: false, message: 'Email not found in token.' };\n    }\n\n    let user = await findUserByEmail(email);\n\n    if (!user) {\n      const newUser = {\n        name: decodedToken.name || 'New User',\n        email: email,\n        photoURL: decodedToken.picture || null,\n      };\n      user = await createUserInDb(newUser);\n    }\n    \n    const cookieStore = await cookies();\n    cookieStore.set('session_userId', user.id, { httpOnly: true, secure: process.env.NODE_ENV === 'production' });\n\n    return { success: true, user };\n  } catch (error: any) {\n    return { success: false, message: error.message || 'Authentication failed.' };\n  }\n}\n\nexport async function logoutAction() {\n    const cookieStore = await cookies();\n    cookieStore.delete('session_userId');\n}\n\n\nexport async function subscribeAction(planId: 'single-post' | 'daily' | 'weekly' | 'monthly', userId: string) {\n  if (!userId) {\n    return { success: false, message: 'User not found.' };\n  }\n\n  try {\n    const userRef = adminDb.collection('users').doc(userId);\n\n    const now = new Date();\n    let expiry = new Date(now);\n\n    switch (planId) {\n      case 'daily':\n        expiry.setDate(now.getDate() + 1);\n        break;\n      case 'weekly':\n        expiry.setDate(now.getDate() + 7);\n        break;\n      case 'monthly':\n        expiry.setMonth(now.getMonth() + 1);\n        break;\n      case 'single-post':\n        expiry.setFullYear(now.getFullYear() + 1);\n        break;\n    }\n    \n    const subscriptionData: User['subscription'] = {\n      status: 'active',\n      plan: planId,\n      startDate: Timestamp.fromDate(now) as any,\n      expiry: Timestamp.fromDate(expiry) as any,\n      postsViewed: 0,\n    };\n    \n    await userRef.update({\n        'subscription': subscriptionData\n    });\n\n    revalidatePath('/pricing');\n    revalidatePath('/profile');\n    revalidatePath('/');\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('Subscription Error:', error);\n    return { success: false, message: error.message || 'An unexpected error occurred.' };\n  }\n}\n\nexport async function submitFeedbackAction(prevState: any, formData: FormData) {\n    const email = formData.get('email') as string;\n    const feedback = formData.get('feedback') as string;\n\n    if (!feedback) {\n        return { success: false, message: 'Feedback cannot be empty.' };\n    }\n\n    try {\n        await adminDb.collection('feedback').add({\n            email: email || 'anonymous',\n            feedback: feedback,\n            submittedAt: FieldValue.serverTimestamp(),\n        });\n        return { success: true, message: 'Your feedback has been submitted.' };\n    } catch (error) {\n        console.error('Feedback submission error:', error);\n        return { success: false, message: 'Something went wrong. Please try again.' };\n    }\n}\n\nexport async function updatePostViewCountAction(userId: string, count: number) {\n    if (!userId || count === 0) return;\n\n    const userRef = adminDb.collection('users').doc(userId);\n\n    try {\n        const userDoc = await userRef.get();\n        if (userDoc.exists) {\n            const currentCount = userDoc.data()?.subscription?.postsViewed || 0;\n            await userRef.update({\n                'subscription.postsViewed': currentCount + count\n            });\n        }\n    } catch (error) {\n        console.error(`Failed to update view count for user ${userId}:`, error);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 716, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {updatePostViewCountAction as '60cc8ebb244f6fe1f1f1b3d8ee4bd944f52bd618c3'} from 'ACTIONS_MODULE0'\nexport {logoutAction as '004d49033eb565a117b1d8b30854d8c4f35e240335'} from 'ACTIONS_MODULE0'\nexport {deactivateSinglePostPassAction as '40ed8ce8c40eb1eb22037a6c8d02de7eed81678c50'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 797, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Dashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call Dashboard() from the server but Dashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/dashboard.tsx <module evaluation>\",\n    \"Dashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8DACA","debugId":null}},
    {"offset": {"line": 811, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Dashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call Dashboard() from the server but Dashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/dashboard.tsx\",\n    \"Dashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0CACA","debugId":null}},
    {"offset": {"line": 825, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 835, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/session.ts"],"sourcesContent":["import { cache } from 'react';\nimport { cookies } from 'next/headers';\nimport { getUserById } from './data';\nimport type { User } from './types';\n\nexport async function getUserId(): Promise<string | undefined> {\n  const cookieStore = await cookies();\n  const sessionCookie = cookieStore.get('session_userId');\n  return sessionCookie?.value;\n}\n\nexport async function getAuthId(): Promise<string | undefined> {\n    const cookieStore = await cookies();\n    const sessionCookie = cookieStore.get('session_authId');\n    return sessionCookie?.value;\n}\n\nexport const getCurrentUser = cache(async (): Promise<User | null> => {\n  const userId = await getUserId();\n  if (!userId) {\n    return null;\n  }\n  const user = await getUserById(userId);\n  return user || null;\n});\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;;;;;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,gBAAgB,YAAY,GAAG,CAAC;IACtC,OAAO,eAAe;AACxB;AAEO,eAAe;IAClB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,MAAM,gBAAgB,YAAY,GAAG,CAAC;IACtC,OAAO,eAAe;AAC1B;AAEO,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE;IAClC,MAAM,SAAS,MAAM;IACrB,IAAI,CAAC,QAAQ;QACX,OAAO;IACT;IACA,MAAM,OAAO,MAAM,CAAA,GAAA,kHAAA,CAAA,cAAW,AAAD,EAAE;IAC/B,OAAO,QAAQ;AACjB","debugId":null}},
    {"offset": {"line": 875, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { Dashboard } from '@/components/dashboard';\nimport { getPostsForUser, getBannerImageUrl } from '@/lib/data';\nimport { getCurrentUser } from '@/lib/session';\nimport type { Post } from '@/lib/types';\n\nexport default async function Home() {\n  const user = await getCurrentUser();\n\n  // Fetch all posts if no user is logged in, or user-specific posts if they are\n  const initialPosts: Post[] = await getPostsForUser(user);\n  const bannerImageUrl = await getBannerImageUrl();\n\n  return (\n    <Dashboard initialPosts={initialPosts} bannerImageUrl={bannerImageUrl} />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;;AAGe,eAAe;IAC5B,MAAM,OAAO,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IAEhC,8EAA8E;IAC9E,MAAM,eAAuB,MAAM,CAAA,GAAA,kHAAA,CAAA,kBAAe,AAAD,EAAE;IACnD,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,oBAAiB,AAAD;IAE7C,qBACE,8OAAC,+HAAA,CAAA,YAAS;QAAC,cAAc;QAAc,gBAAgB;;;;;;AAE3D","debugId":null}}]
}