{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { Post, User } from './types';\nimport {FieldValue,Timestamp,} from 'firebase-admin/firestore';\nimport { db as adminDb, auth as adminAuth } from './firebase-admin';\nimport { cookies } from 'next/headers';\nimport { findUserByEmail, createUserInDb, getAuthorAndInstitution, getPostsByAuthorId, getPostById as fetchPostById } from './data';\n\nfunction convertFirestoreTimestampToDate(timestamp: any): Date | null {\n  if (!timestamp) {\n    return null;\n  }\n  if (typeof timestamp.seconds === 'number' && typeof timestamp.nanoseconds === 'number') {\n    return new Date(timestamp.seconds * 1000 + timestamp.nanoseconds / 1000000);\n  }\n  const date = new Date(timestamp);\n  if (!isNaN(date.getTime())) {\n    return date;\n  }\n  return null;\n}\n\nexport async function createPostAction(prevState: any, formData: FormData): Promise<{ success: boolean; message?: string; post?: Post }> {\n  const authorId = formData.get('authorId') as string;\n\n  try {\n    const authorResult = await getAuthorAndInstitution(authorId);\n    if (!authorResult) {\n      return { success: false, message: 'Error: Could not find author or institution.' };\n    }\n\n    const { authorData } = authorResult;\n\n    const deadlineStr = formData.get('timestamps.deadline') as string;\n    const deadline = Timestamp.fromDate(new Date(deadlineStr));\n\n    const newPostData: Omit<Post, 'id' | 'author'> = {\n      authorId,\n      authorInfo: {\n        authorName: authorData.userProfile.name,\n        gender: authorData.userProfile.gender || 'prefer_not_to_say',\n      },\n      details: {\n        title: formData.get('details.title') as string,\n        restaurant: formData.get('details.restaurant') as string,\n        notes: formData.get('details.notes') as string,\n      },\n      order: {\n        totalAmount: parseFloat(formData.get('order.totalAmount') as string),\n        contributionAmount: parseFloat(formData.get('order.contributionAmount') as string),\n      },\n      timestamps: {\n        createdAt: FieldValue.serverTimestamp() as any,\n        updatedAt: FieldValue.serverTimestamp() as any,\n        deadline: deadline as any,\n      },\n      location: {\n        institutionName: authorData.institution?.institutionName ?? undefined,\n        area: authorData.location?.area ?? undefined,\n        city: authorData.location?.city ?? undefined,\n      },\n    };\n\n    const docRef = await adminDb.collection('posts').add(newPostData);\n    const newPost = await fetchPostById(docRef.id);\n    \n    revalidatePath('/');\n    revalidatePath('/my-posts');\n    \n    if (!newPost) {\n        return { success: false, message: \"Post created but failed to retrieve.\" };\n    }\n\n    // Return the newly created post so the client can update its cache\n    return { success: true, post: JSON.parse(JSON.stringify(newPost)) };\n\n  } catch (error) {\n    console.error('Error creating post:', error);\n    return { success: false, message: `Error creating post: ${error instanceof Error ? error.message : 'Unknown error'}` };\n  }\n}\n\nexport async function deletePostAction(postId: string, userId: string) {\n    try {\n        await adminDb.collection('posts').doc(postId).delete();\n        revalidatePath('/my-posts');\n        return { success: true, message: 'Post deleted successfully.' };\n    } catch (error) {\n        console.error('Error deleting post:', error);\n        return { success: false, message: 'Failed to delete post.' };\n    }\n}\n\nexport async function updatePostAction(prevState: any, formData: FormData): Promise<{ success: boolean; message?: string; post?: Post }> {\n    const postId = formData.get('postId') as string;\n    const userId = formData.get('userId') as string;\n    if (!postId || !userId) {\n        return { success: false, message: 'Error: Post ID or User ID is missing.' };\n    }\n\n    try {\n        const deadlineStr = formData.get('timestamps.deadline') as string;\n        const deadline = Timestamp.fromDate(new Date(deadlineStr));\n\n        const updates = {\n            'details.title': formData.get('details.title') as string,\n            'details.restaurant': formData.get('details.restaurant') as string,\n            'details.notes': formData.get('details.notes') as string,\n            'order.totalAmount': parseFloat(formData.get('order.totalAmount') as string),\n            'order.contributionAmount': parseFloat(formData.get('order.contributionAmount') as string),\n            'timestamps.deadline': deadline,\n            'timestamps.updatedAt': FieldValue.serverTimestamp(),\n        };\n\n        await adminDb.collection('posts').doc(postId).update(updates);\n        const updatedPost = await fetchPostById(postId);\n\n        revalidatePath('/');\n        revalidatePath('/my-posts');\n        revalidatePath(`/edit-post/${postId}`);\n\n        if (!updatedPost) {\n            return { success: false, message: \"Post updated but failed to retrieve.\" };\n        }\n\n        return { success: true, message: 'Post updated successfully!', post: JSON.parse(JSON.stringify(updatedPost)) };\n    } catch (error) {\n        console.error(`Error updating post ${postId}:`, error);\n        return { success: false, message: `Error updating post: ${error instanceof Error ? error.message : 'Unknown error'}` };\n    }\n}\n\n\nexport async function updateProfileAction(prevState: any, formData: FormData) {\n    const userId = formData.get('id') as string;\n    if (!userId) {\n        return { message: 'Error: User ID is missing.' };\n    }\n\n    const oneWeek = 7 * 24 * 60 * 60 * 1000;\n\n    try {\n        const userRef = adminDb.collection('users').doc(userId);\n        const userDoc = await userRef.get();\n        if (!userDoc.exists) {\n            return { message: 'Error: User not found.' };\n        }\n        \n        const userData = userDoc.data() as User;\n        const lastUpdateStr = userData.userProfile?.lastProfileUpdate;\n        \n        if (lastUpdateStr) {\n            const lastUpdate = new Date(lastUpdateStr);\n            if ((new Date().getTime() - lastUpdate.getTime()) < oneWeek) {\n                 return { message: 'Profile can only be updated once a week.' };\n            }\n        }\n        \n        const updates: Record<string, any> = {\n            'userProfile.name': formData.get('name'),\n            'userProfile.lastProfileUpdate': FieldValue.serverTimestamp(),\n            'contact.phone': formData.get('contactNumber'),\n            'contact.shareContact': formData.get('shareContact') === 'on',\n            'institution.institutionType': formData.get('institutionType'),\n            'institution.institutionName': formData.get('institutionName'),\n            'location.area': formData.get('area'),\n            'location.city': formData.get('city'),\n            'location.pinCode': formData.get('pinCode'),\n        };\n\n        await userRef.update(updates);\n        \n        revalidatePath('/profile');\n        revalidatePath('/');\n\n        return { message: 'Profile updated successfully!' };\n    } catch (error) {\n        console.error('Error updating profile:', error);\n        return { message: `Error updating profile: ${error instanceof Error ? error.message : 'Unknown error'}` };\n    }\n}\n\n\nexport async function deactivateSinglePostPassAction(userId: string) {\n  try {\n    const userRef = adminDb.collection('users').doc(userId);\n    const userDoc = await userRef.get();\n\n    if (!userDoc.exists) {\n      return { success: false, message: 'User not found.' };\n    }\n\n    const user = userDoc.data() as User;\n\n    if (user.subscription?.plan === 'single-post' && user.subscription?.status === 'active') {\n      await userRef.update({\n        'subscription.status': 'inactive',\n        'subscription.postsViewed': 1, \n      });\n\n      revalidatePath('/'); \n\n      return { success: true, message: 'Single-post pass used and deactivated.' };\n    } else {\n      return { success: false, message: 'No active single-post pass to deactivate.' };\n    }\n  } catch (error) {\n    console.error('Error deactivating single-post pass:', error);\n    return { success: false, message: 'An unexpected error occurred.' };\n  }\n}\n\n\nexport async function verifyAndSignInAction(idToken: string) {\n  try {\n    const decodedToken = await adminAuth.verifyIdToken(idToken);\n    const uid = decodedToken.uid;\n    const email = decodedToken.email;\n\n    if (!email) {\n      return { success: false, message: 'Email not found in token.' };\n    }\n\n    let user = await findUserByEmail(email);\n\n    if (!user) {\n      const newUser = {\n        name: decodedToken.name || 'New User',\n        email: email,\n        photoURL: decodedToken.picture || null,\n      };\n      user = await createUserInDb(newUser);\n    }\n    \n    const cookieStore = await cookies();\n    cookieStore.set('session_userId', user.id, { httpOnly: true, secure: process.env.NODE_ENV === 'production' });\n\n    return { success: true, user };\n  } catch (error: any) {\n    return { success: false, message: error.message || 'Authentication failed.' };\n  }\n}\n\nexport async function logoutAction() {\n    const cookieStore = await cookies();\n    cookieStore.delete('session_userId');\n}\n\n\nexport async function subscribeAction(planId: 'single-post' | 'daily' | 'weekly' | 'monthly', userId: string) {\n  if (!userId) {\n    return { success: false, message: 'User not found.' };\n  }\n\n  try {\n    const userRef = adminDb.collection('users').doc(userId);\n\n    const now = new Date();\n    let expiry = new Date(now);\n\n    switch (planId) {\n      case 'daily':\n        expiry.setDate(now.getDate() + 1);\n        break;\n      case 'weekly':\n        expiry.setDate(now.getDate() + 7);\n        break;\n      case 'monthly':\n        expiry.setMonth(now.getMonth() + 1);\n        break;\n      case 'single-post':\n        expiry.setFullYear(now.getFullYear() + 1);\n        break;\n    }\n    \n    const subscriptionData = {\n      status: 'active' as const,\n      plan: planId,\n      startDate: Timestamp.fromDate(now),\n      expiry: Timestamp.fromDate(expiry),\n      postsViewed: 0,\n    };\n    \n    await userRef.update({\n        'subscription': subscriptionData\n    });\n\n    revalidatePath('/pricing');\n    revalidatePath('/profile');\n    revalidatePath('/');\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('Subscription Error:', error);\n    return { success: false, message: error.message || 'An unexpected error occurred.' };\n  }\n}\n\nexport async function submitFeedbackAction(prevState: any, formData: FormData) {\n    const email = formData.get('email') as string;\n    const feedback = formData.get('feedback') as string;\n\n    if (!feedback) {\n        return { success: false, message: 'Feedback cannot be empty.' };\n    }\n\n    try {\n        await adminDb.collection('feedback').add({\n            email: email || 'anonymous',\n            feedback: feedback,\n            submittedAt: FieldValue.serverTimestamp(),\n        });\n        return { success: true, message: 'Your feedback has been submitted.' };\n    } catch (error) {\n        console.error('Feedback submission error:', error);\n        return { success: false, message: 'Something went wrong. Please try again.' };\n    }\n}\n\nexport async function updatePostViewCountAction(userId: string, count: number) {\n    if (!userId || count === 0) return;\n\n    const userRef = adminDb.collection('users').doc(userId);\n\n    try {\n        const userDoc = await userRef.get();\n        if (userDoc.exists) {\n            const currentCount = userDoc.data()?.subscription?.postsViewed || 0;\n            await userRef.update({\n                'subscription.postsViewed': currentCount + count\n            });\n        }\n    } catch (error) {\n        console.error(`Failed to update view count for user ${userId}:`, error);\n    }\n}\n\nexport async function getMyPostsAction(userId: string) {\n  if (!userId) {\n    return { success: false, message: 'User not found.', posts: [] };\n  }\n  try {\n    const posts = await getPostsByAuthorId(userId);\n    // Ensure data is serializable before sending to the client\n    return { success: true, posts: JSON.parse(JSON.stringify(posts)) };\n  } catch (error) {\n    console.error('Error fetching my posts:', error);\n    return { success: false, message: 'Failed to fetch posts.', posts: [] };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28auth%29/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logoutAction as '004d49033eb565a117b1d8b30854d8c4f35e240335'} from 'ACTIONS_MODULE0'\nexport {updatePostViewCountAction as '60cc8ebb244f6fe1f1f1b3d8ee4bd944f52bd618c3'} from 'ACTIONS_MODULE0'\nexport {verifyAndSignInAction as '40a73254002cde1c95d945c197624b37db4228a7b2'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/auth-forms.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AuthForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthForm() from the server but AuthForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/auth-forms.tsx <module evaluation>\",\n    \"AuthForm\",\n);\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/auth-forms.tsx <module evaluation>\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,+DACA;AAEG,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,+DACA","debugId":null}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/auth-forms.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const AuthForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call AuthForm() from the server but AuthForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/auth-forms.tsx\",\n    \"AuthForm\",\n);\nexport const LoginForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call LoginForm() from the server but LoginForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/auth-forms.tsx\",\n    \"LoginForm\",\n);\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,2CACA;AAEG,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,2CACA","debugId":null}},
    {"offset": {"line": 571, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 581, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28auth%29/login/page.tsx"],"sourcesContent":["import { AuthForm } from '@/components/auth-forms';\n\nexport default async function LoginPage() {\n  return <AuthForm />;\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,eAAe;IAC5B,qBAAO,8OAAC,mIAAA,CAAA,WAAQ;;;;;AAClB","debugId":null}}]
}