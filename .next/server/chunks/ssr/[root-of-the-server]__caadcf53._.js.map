{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n\n// @ts-nocheck\n'use server';\n\nimport { z } from 'zod';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { revalidatePath } from 'next/cache';\nimport { FieldValue } from 'firebase-admin/firestore';\n\nimport { createPost, findUserByEmail, updateUser, createUserInDb, getUserById, deletePost, updatePost, getPostById } from '@/lib/data';\nimport { auth as adminAuth, firestore } from 'firebase-admin';\nimport { db } from './firebase-admin';\n\nexport async function verifyAndSignInAction(idToken: string) {\n  console.log('actions: verifyAndSignInAction started.');\n  try {\n    if (!idToken) {\n      return { success: false, message: 'No token provided.' };\n    }\n    const decodedToken = await adminAuth().verifyIdToken(idToken);\n    console.log('actions: ID token verified successfully. Decoded token:', decodedToken);\n\n    const uid = decodedToken.uid;\n    const email = decodedToken.email;\n    const name = decodedToken.name;\n    const photoURL = decodedToken.picture;\n    const gender = decodedToken.gender || 'prefer_not_to_say';\n\n    if (!email || !name) {\n      console.error('actions: Google account missing email or name.');\n      return { success: false, message: 'Google account must have an email and name.' };\n    }\n\n    if (!email.endsWith('@iitdh.ac.in')) {\n      console.error(`actions: Email is not from @iitdh.ac.in domain: ${email}`);\n      return { success: false, message: `Only users with a @iitdh.ac.in email can sign up. Your email is ${email}.` };\n    }\n\n    console.log(`actions: Attempting to find user with email: ${email}`);\n    let user = await findUserByEmail(email);\n    let userId: string;\n\n    if (!user) {\n      console.log('actions: User not found. Creating new user in DB...');\n      const newUser = await createUserInDb({\n        name: name,\n        email: email,\n        photoURL: photoURL,\n        gender: gender\n      });\n      userId = newUser.id;\n      console.log('actions: New user created with ID:', userId);\n    } else {\n      userId = user.id;\n      console.log('actions: Existing user found with ID:', userId);\n    }\n\n    const cookieStore = cookies();\n    cookieStore.set('session_userId', userId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 1 day\n      path: '/',\n    });\n    cookieStore.set('session_authId', uid, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 60 * 60 * 24, // 1 day\n      path: '/',\n    });\n\n    revalidatePath('/');\n    console.log('actions: Session cookie set successfully.');\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('actions: Error during token verification:', error);\n    return { success: false, message: `Internal error: ${error.message}` };\n  }\n}\n\n\nexport async function logoutAction() {\n  const cookieStore = cookies();\n  const authId = cookieStore.get('session_authId')?.value;\n  if (authId) {\n    try {\n      await adminAuth().revokeRefreshTokens(authId);\n    } catch (error) {\n      console.error('Error revoking refresh tokens:', error);\n    }\n  }\n  cookieStore.delete('session_userId');\n  cookieStore.delete('session_authId');\n  revalidatePath('/');\n}\n\nconst postSchema = z.object({\n  title: z.string().min(1, 'Title is required.'),\n  restaurant: z.string().min(1, 'Restaurant is required.'),\n  totalAmount: z.coerce.number().min(0, 'Total amount must be positive.'),\n  contributionAmount: z.coerce.number().min(0, 'Contribution must be positive.'),\n  deadline: z.coerce.date(),\n  notes: z.string().optional(),\n  authorId: z.string(),\n});\n\nexport async function createPostAction(prevState: any, formData: FormData) {\n  const authorId = formData.get('authorId') as string;\n  const user = await getUserById(authorId);\n\n  if (!user || !user.userProfile.name || !user.contact.phone || !user.userProfile.gender || user.userProfile.gender === 'prefer_not_to_say') {\n    return { message: 'Please complete your profile (name, contact number, and gender) before posting.' };\n  }\n  \n  const data = Object.fromEntries(formData);\n\n  const parsed = postSchema.safeParse(data);\n\n  if (!parsed.success) {\n    console.error(parsed.error.flatten().fieldErrors);\n    const firstError = Object.values(parsed.error.flatten().fieldErrors)[0]?.[0];\n    return { message: firstError || 'Invalid post data. Please check your inputs.' };\n  }\n  \n  if (parsed.data.contributionAmount > parsed.data.totalAmount) {\n    return { message: 'Your contribution cannot be greater than the total order amount.' };\n  }\n\n  // Denormalize user data into the post\n  const postDataWithDenormalization = {\n    ...parsed.data,\n    institutionName: user.institution?.institutionName || null,\n    area: user.location?.area || null,\n    city: user.location?.city || null,\n    authorName: user.userProfile.name,\n    gender: user.userProfile.gender,\n  };\n\n  await createPost(postDataWithDenormalization);\n  revalidatePath('/');\n  redirect('/');\n}\n\nconst updatePostSchema = postSchema.omit({ authorId: true }).extend({\n  postId: z.string(),\n});\n\nexport async function updatePostAction(prevState: any, formData: FormData) {\n  const data = Object.fromEntries(formData);\n  const parsed = updatePostSchema.safeParse(data);\n\n  if (!parsed.success) {\n      return { message: 'Invalid post data. Please check your inputs.' };\n  }\n  \n  const post = await getPostById(parsed.data.postId);\n  if (!post) {\n      return { message: 'Post not found.' };\n  }\n\n  if (post.updatedAt) {\n      return { message: 'This post has already been updated once and cannot be edited again.' };\n  }\n\n  if (parsed.data.contributionAmount > parsed.data.totalAmount) {\n      return { message: 'Your contribution cannot be greater than the total order amount.' };\n  }\n\n  await updatePost(parsed.data.postId, parsed.data);\n  revalidatePath('/my-posts');\n  redirect('/my-posts?message=Changes saved successfully. You cannot edit this post again.');\n}\n\nexport async function deletePostAction(postId: string) {\n  await deletePost(postId);\n  revalidatePath('/my-posts');\n}\n\n\nconst profileSchema = z.object({\n  id: z.string(),\n  name: z.string().min(2, 'Name must be at least 2 characters.'),\n  contactNumber: z.string().min(10, 'Contact number must be at least 10 digits.'),\n  gender: z.enum(['male', 'female', 'other', 'prefer_not_to_say']),\n  institutionType: z.enum(['College/University', 'Hostel/PG/Apartment']).optional(),\n  institutionName: z.string().optional(),\n  area: z.string().optional(),\n  city: z.string().optional(),\n  pinCode: z.string().optional(),\n}).refine(data => data.gender !== 'prefer_not_to_say', {\n  message: \"Please select a gender.\",\n  path: [\"gender\"],\n});\n\nexport async function updateProfileAction(prevState: any, formData: FormData) {\n  const parsed = profileSchema.safeParse(Object.fromEntries(formData));\n\n  if (!parsed.success) {\n    return { message: 'Invalid profile data.' };\n  }\n\n  const { id, institutionType, institutionName, area, ...data } = parsed.data;\n\n  const updates: Record<string, any> = {\n    'userProfile.name': data.name,\n    'userProfile.gender': data.gender || null,\n    'contact.phone': data.contactNumber || null,\n    'contact.whatsapp': data.contactNumber || null, // Assuming phone and whatsapp are the same\n    'institution.institutionType': institutionType || null,\n    'institution.institutionName': institutionName || null,\n    'location.area': area || null,\n    'location.city': data.city || null,\n    'location.pinCode': data.pinCode || null,\n    'institution.hostelOrPG': null, // Explicitly remove this field\n  };\n\n  await updateUser(id, updates);\n\n  revalidatePath('/profile');\n  revalidatePath('/');\n  return { message: 'Profile updated successfully!' };\n}\n\nexport async function subscribeAction(plan: 'single-post' | 'daily' | 'weekly' | 'monthly', userId: string) {\n  try {\n    const updates: Record<string, any> = {\n      'subscription.status': 'active',\n      'subscription.plan': plan,\n      'subscription.startDate': new Date().toISOString(),\n      'subscription.postsViewed': 0, // Reset view count on new subscription\n    };\n\n    if (plan === 'single-post') {\n      updates['subscription.expiry'] = null;\n    } else {\n      let expiryDate = new Date();\n      if (plan === 'daily') expiryDate.setDate(expiryDate.getDate() + 1);\n      if (plan === 'weekly') expiryDate.setDate(expiryDate.getDate() + 7);\n      if (plan === 'monthly') expiryDate.setDate(expiryDate.getDate() + 30);\n      updates['subscription.expiry'] = expiryDate.toISOString();\n    }\n\n    await updateUser(userId, updates);\n\n    revalidatePath('/pricing');\n    revalidatePath('/');\n    revalidatePath('/profile');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Subscription action failed:', error);\n    return { success: false, message: 'Could not update subscription.' };\n  }\n}\n\n\nexport async function deactivateSinglePostPassAction(userId: string) {\n  try {\n    await updateUser(userId, {\n      'subscription.status': 'inactive',\n    });\n    revalidatePath('/');\n    revalidatePath('/profile');\n    return { success: true };\n  } catch (error) {\n    console.error('deactivateSinglePostPassAction failed:', error);\n    return { success: false };\n  }\n}\n\nexport async function updatePostViewCountAction(userId: string, count: number) {\n  if (!userId || count <= 0) {\n    return;\n  }\n  try {\n    await db.collection('users').doc(userId).update({\n      'subscription.postsViewed': FieldValue.increment(count),\n    });\n  } catch (error) {\n    console.error('Failed to update post view count:', error);\n  }\n}\n\n\nconst feedbackSchema = z.object({\n  email: z.string().email().optional().or(z.literal('')),\n  feedback: z.string().min(10, 'Feedback must be at least 10 characters.'),\n});\n\nexport async function submitFeedbackAction(prevState: any, formData: FormData) {\n  try {\n    const data = Object.fromEntries(formData);\n    const parsed = feedbackSchema.safeParse(data);\n\n    if (!parsed.success) {\n      const firstError = Object.values(parsed.error.flatten().fieldErrors)[0]?.[0];\n      return { success: false, message: firstError || 'Invalid data.' };\n    }\n\n    const feedbackData = {\n      email: parsed.data.email || null,\n      feedback: parsed.data.feedback,\n      createdAt: new Date(),\n    };\n\n    await db.collection('feedback').add(feedbackData);\n\n    return { success: true, message: 'Thank you for your feedback!' };\n  } catch (error) {\n    return { success: false, message: 'Something went wrong. Please try again.' };\n  }\n}\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 626, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-post-title-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI copywriter to generate catchy post titles.\n *\n * - generatePostTitle - A function that handles the title generation.\n * - GeneratePostTitleInput - The input type for the generatePostTitle function.\n * - GeneratePostTitleOutput - The return type for the generatePostTitle function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst GeneratePostTitleInputSchema = z.object({\n  userInputTitle: z.string().optional().describe('The original title the user entered, if any.'),\n  restaurantName: z.string().describe('The name of the delivery app or restaurant.'),\n  remainingAmount: z.number().describe('The remaining amount in INR needed to complete the order.'),\n  deadlineHours: z.number().describe('The number of hours left until the order deadline.'),\n  discountInfo: z.string().optional().describe('Information about any discounts or coupons available.'),\n});\nexport type GeneratePostTitleInput = z.infer<typeof GeneratePostTitleInputSchema>;\n\nconst GeneratePostTitleOutputSchema = z.object({\n  catchyTitle: z.string().describe('The generated catchy and engaging title for the post.'),\n});\nexport type GeneratePostTitleOutput = z.infer<typeof GeneratePostTitleOutputSchema>;\n\nexport async function generatePostTitle(input: GeneratePostTitleInput): Promise<GeneratePostTitleOutput> {\n  return generatePostTitleFlow(input);\n}\n\nconst generatePostTitlePrompt = ai.definePrompt({\n  name: 'generatePostTitlePrompt',\n  input: { schema: GeneratePostTitleInputSchema },\n  output: { schema: GeneratePostTitleOutputSchema },\n  prompt: `You are an expert copywriter for a group ordering app. \nYour task is to generate a catchy and engaging title for a group order post based on the provided details.\n\nFollow these rules:\n- If the user's input title is good, rewrite it in a short, catchy way.\n- If the input is weak, empty, or not provided, auto-generate a title from the other post details.\n- Always highlight a discount (like \"₹100 off\") or \"Free delivery\" if present in the discount info. This is the most important info.\n- If the remaining amount is greater than 0, mention it. Example: \"Just ₹{{remainingAmount}} more needed!\"\n- If the deadline is less than 24 hours, add urgency. Example: \"(Closes in {{deadlineHours}}h ⏳)\"\n- Always include the restaurant/app name for context.\n- Keep the title under 12 words.\n- Use emojis like 🚚, 🔥, 🎉, 🍕 where relevant to make it eye-catching.\n- Randomize phrasing slightly so not all posts look the same. For example, use \"Join in!\", \"Let's order!\", \"Group order for...\" etc.\n\nPost Details:\n- User's Input Title: \"{{userInputTitle}}\"\n- Restaurant/App: \"{{restaurantName}}\"\n- Remaining Amount Needed: ₹{{remainingAmount}}\n- Deadline (Hours Left): {{deadlineHours}}\n- Discount/Coupon Info: \"{{discountInfo}}\"\n\nGenerate a single, catchy title. Return only the final title string in the 'catchyTitle' field.\n`,\n});\n\nconst generatePostTitleFlow = ai.defineFlow(\n  {\n    name: 'generatePostTitleFlow',\n    inputSchema: GeneratePostTitleInputSchema,\n    outputSchema: GeneratePostTitleOutputSchema,\n  },\n  async (input) => {\n    const { output } = await generatePostTitlePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC/C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACpC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC/C;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC9C,MAAM;IACN,OAAO;QAAE,QAAQ;IAA6B;IAC9C,QAAQ;QAAE,QAAQ;IAA8B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBX,CAAC;AACD;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,wBAAwB;IACjD,OAAO;AACT;;;IA1CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 709, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {updatePostViewCountAction as '60cc8ebb244f6fe1f1f1b3d8ee4bd944f52bd618c3'} from 'ACTIONS_MODULE0'\nexport {logoutAction as '004d49033eb565a117b1d8b30854d8c4f35e240335'} from 'ACTIONS_MODULE0'\nexport {deactivateSinglePostPassAction as '40ed8ce8c40eb1eb22037a6c8d02de7eed81678c50'} from 'ACTIONS_MODULE0'\nexport {generatePostTitle as '40522375b82b814e36222da9c8c09b57c3c638c5fe'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAGA","debugId":null}},
    {"offset": {"line": 796, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Dashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call Dashboard() from the server but Dashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/dashboard.tsx <module evaluation>\",\n    \"Dashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8DACA","debugId":null}},
    {"offset": {"line": 810, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Dashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call Dashboard() from the server but Dashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/dashboard.tsx\",\n    \"Dashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0CACA","debugId":null}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 834, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { Dashboard } from '@/components/dashboard';\nimport { getPostsForUser, getBannerImageUrl } from '@/lib/data';\nimport { getCurrentUser } from '@/lib/session';\nimport type { Post } from '@/lib/types';\n\nexport default async function Home() {\n  const user = await getCurrentUser();\n\n  // Fetch all posts if no user is logged in, or user-specific posts if they are\n  const initialPosts: Post[] = await getPostsForUser(user);\n  const bannerImageUrl = await getBannerImageUrl();\n\n  return (\n    <Dashboard initialPosts={initialPosts} bannerImageUrl={bannerImageUrl} />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;;AAGe,eAAe;IAC5B,MAAM,OAAO,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IAEhC,8EAA8E;IAC9E,MAAM,eAAuB,MAAM,CAAA,GAAA,kHAAA,CAAA,kBAAe,AAAD,EAAE;IACnD,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,oBAAiB,AAAD;IAE7C,qBACE,8OAAC,+HAAA,CAAA,YAAS;QAAC,cAAc;QAAc,gBAAgB;;;;;;AAE3D","debugId":null}}]
}