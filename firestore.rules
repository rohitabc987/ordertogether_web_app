
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow a user to read and update their own profile.
      // Deny create and delete operations from the client.
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create, delete: if false;

      // Allow any authenticated user to read non-sensitive public profile info of another user.
      // This is needed to display author details on posts.
      allow get: if isAuthenticated();
    }

    // Rules for the 'posts' collection
    match /posts/{postId} {
      // Anyone can read posts (for the public dashboard)
      allow get, list: if true;

      // Only authenticated users can create posts.
      // The new post data must have an authorId matching the user's UID.
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;

      // Only the author of a post can update or delete it.
      allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
    }
    
    // Rules for the 'feedback' collection
    match /feedback/{feedbackId} {
        // Feedback should only be submitted via a server action (admin SDK).
        // Disallow all direct client read/write operations.
        allow read, write: if false;
    }

    // Rules for the 'app_data' collection
    match /app_data/{docId} {
        // App configuration data should not be writable from the client.
        // It should only be readable if needed, but for now, we will lock it down.
        allow read, write: if false;
    }
  }
}
